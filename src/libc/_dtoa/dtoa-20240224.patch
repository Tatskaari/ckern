--- dtoa-20240224.c	2024-04-30 22:54:00.413377753 +0200
+++ dtoa.c	2024-04-30 22:57:27.233377606 +0200
@@ -1,3 +1,28 @@
+/* strtod( const char *, char * )
+   _PDCLIB_dtoa( double, int, int, int *, int *, char ** )
+   _PDCLIB_freedtoa( char * )
+
+   This file is part of the Public Domain C Library (PDCLib).
+
+   !! THIS FILE IS NOT UNDER CC0 LICENSE !!
+
+   !! PLEASE READ LICENSE STATEMENT BELOW CAREFULLY !!
+
+   It is a slightly modified copy of David M. Gay's dtoa.c, retrieved from
+           https://netlib.org/fp/dtoa.c
+   at version 20240224.
+*/
+
+#ifndef REGTEST
+
+#include "pdclib/_PDCLIB_internal.h"
+
+#if _PDCLIB_ENDIANESS == 1234
+#define IEEE_8087
+#else
+#define IEEE_m68k
+#endif
+
 /****************************************************************
  *
  * The author of this software is David M. Gay.
@@ -150,8 +175,9 @@
  *	in pow5mult, ensures lazy evaluation of only one copy of high
  *	powers of 5; omitting this lock would introduce a small
  *	probability of wasting memory, but would otherwise be harmless.)
- *	You must also invoke freedtoa(s) to free the value s returned by
- *	dtoa.  You may do so whether or not MULTIPLE_THREADS is #defined.
+ *	You must also invoke _PDCLIB_freedtoa(s) to free the value s
+ *	returned by dtoa.
+ *	You may do so whether or not MULTIPLE_THREADS is #defined.
 
  *	When MULTIPLE_THREADS is #defined, this source file provides
  *		void set_max_dtoa_threads(unsigned int n);
@@ -343,7 +369,7 @@
 #endif
 
 #if defined(IEEE_8087) + defined(IEEE_MC68k) + defined(VAX) + defined(IBM) != 1
-Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.
+#error Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.
 #endif
 
 #undef USE_BF96
@@ -1501,12 +1527,6 @@
 
 #define Kmax 7
 
-#ifdef __cplusplus
-extern "C" double strtod(const char *s00, char **se);
-extern "C" char *dtoa(double d, int mode, int ndigits,
-			int *decpt, int *sign, char **rve);
-#endif
-
  struct
 Bigint {
 	struct Bigint *next;
@@ -2715,7 +2735,7 @@
 	Round_down = 3
 	};
 
- void
+ static void
 gethex(const char **sp, U *rvp, int rounding, int sign MTd)
 {
 	Bigint *b;
@@ -2825,7 +2845,7 @@
 		switch(*++s) {
 		  case '-':
 			esign = 1;
-			/* no break */
+			/* FALLTHROUGH */
 		  case '+':
 			s++;
 		  }
@@ -3520,11 +3540,11 @@
 	for(s = s00;;s++) switch(*s) {
 		case '-':
 			sign = 1;
-			/* no break */
+			/* FALLTHROUGH */
 		case '+':
 			if (*++s)
 				goto break2;
-			/* no break */
+			/* FALLTHROUGH */
 		case 0:
 			goto ret0;
 		case '\t':
@@ -3651,6 +3671,7 @@
 		switch(c = *++s) {
 			case '-':
 				esign = 1;
+                /* FALLTHROUGH */
 			case '+':
 				c = *++s;
 			}
@@ -4937,14 +4958,14 @@
 	return rv;
 	}
 
-/* freedtoa(s) must be used to free values s returned by dtoa
+/* _PDCLIB_freedtoa(s) must be used to free values s returned by dtoa
  * when MULTIPLE_THREADS is #defined.  It should be used in all cases,
  * but for consistency with earlier versions of dtoa, it is optional
  * when MULTIPLE_THREADS is not defined.
  */
 
  void
-freedtoa(char *s)
+_PDCLIB_freedtoa(char *s)
 {
 #ifdef MULTIPLE_THREADS
 	ThInfo *TI = 0;
@@ -4992,7 +5013,7 @@
  *	   calculation.
  */
 
- char *
+static char *
 dtoa_r(double dd, int mode, int ndigits, int *decpt, int *sign, char **rve, char *buf, size_t blen)
 {
  /*	Arguments ndigits, decpt, sign are similar to those
@@ -5032,7 +5053,7 @@
 	should succeed in returning buf.
 
 	When buf is NULL, sufficient space is allocated for the return value,
-	which, when done using, the caller should pass to freedtoa().
+	which, when done using, the caller should pass to _PDCLIB_freedtoa().
 
 	USE_BF is automatically defined when neither NO_LONG_LONG nor NO_BF96
 	is defined.
@@ -5301,7 +5322,7 @@
 			break;
 		case 2:
 			leftright = 0;
-			/* no break */
+			/* FALLTHROUGH */
 		case 4:
 			if (ndigits <= 0)
 				ndigits = 1;
@@ -5309,7 +5330,7 @@
 			break;
 		case 3:
 			leftright = 0;
-			/* no break */
+			/* FALLTHROUGH */
 		case 5:
 			i = ndigits + k + 1;
 			ilim = i;
@@ -5424,6 +5445,7 @@
 				switch(Rounding) {
 				  case 0: goto retc;
 				  case 2: goto Roundup;
+				  default: break;
 				  }
 				ures = 2*res;
 				if (ures > den
@@ -6230,7 +6252,7 @@
 	}
 
  char *
-dtoa(double dd, int mode, int ndigits, int *decpt, int *sign, char **rve)
+_PDCLIB_dtoa(double dd, int mode, int ndigits, int *decpt, int *sign, char **rve)
 {
 	/*	Sufficient space is allocated to the return value
 		to hold the suppressed trailing zeros.
@@ -6238,7 +6260,7 @@
 	*/
 #ifndef MULTIPLE_THREADS
 	if (dtoa_result)
-		freedtoa(dtoa_result);
+		_PDCLIB_freedtoa(dtoa_result);
 #endif
 	return dtoa_r(dd, mode, ndigits, decpt, sign, rve, 0, 0);
 	}
@@ -6246,3 +6268,19 @@
 #ifdef __cplusplus
 }
 #endif
+
+#endif
+
+#ifdef TEST
+
+#include <stdlib.h>
+
+#include "_PDCLIB_test.h"
+
+int main( void )
+{
+    TESTCASE( strtod( "0.0", NULL ) == 0.0 );
+    return TEST_RESULTS;
+}
+
+#endif
